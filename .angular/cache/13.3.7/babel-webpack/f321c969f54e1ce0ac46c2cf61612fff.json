{"ast":null,"code":"import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport * as i2 from '@angular/cdk/portal';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, Input, Output, ContentChild, ViewChild, Host, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/collections';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\n\nconst _c0 = [\"body\"];\n\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) {}\n\nconst _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nconst _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\n\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\n  }\n}\n\nconst _c3 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nconst _c4 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\n\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\n\nconst matExpansionAnimations = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [state('collapsed, void', style({\n    transform: 'rotate(0deg)'\n  })), state('expanded', style({\n    transform: 'rotate(180deg)'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [state('collapsed, void', style({\n    height: '0px',\n    visibility: 'hidden'\n  })), state('expanded', style({\n    height: '*',\n    visibility: 'visible'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n\nclass MatExpansionPanelContent {\n  constructor(_template) {\n    this._template = _template;\n  }\n\n}\n\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) {\n  return new (t || MatExpansionPanelContent)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nMatExpansionPanelContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelContent,\n  selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matExpansionPanelContent]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n/** Counter for generating unique element ids. */\n\n\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\n\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n\nclass MatExpansionPanel extends CdkAccordionItem {\n  constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this._viewContainerRef = _viewContainerRef;\n    this._animationMode = _animationMode;\n    this._hideToggle = false;\n    /** An event emitted after the body's expansion animation happens. */\n\n    this.afterExpand = new EventEmitter();\n    /** An event emitted after the body's collapse animation happens. */\n\n    this.afterCollapse = new EventEmitter();\n    /** Stream that emits for changes in `@Input` properties. */\n\n    this._inputChanges = new Subject();\n    /** ID for the associated header element. Used for a11y labelling. */\n\n    this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n    /** Stream of body animation done events. */\n\n    this._bodyAnimationDone = new Subject();\n    this.accordion = accordion;\n    this._document = _document; // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n  /** Whether the toggle indicator should be hidden. */\n\n\n  get hideToggle() {\n    return this._hideToggle || this.accordion && this.accordion.hideToggle;\n  }\n\n  set hideToggle(value) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  /** The position of the expansion indicator. */\n\n\n  get togglePosition() {\n    return this._togglePosition || this.accordion && this.accordion.togglePosition;\n  }\n\n  set togglePosition(value) {\n    this._togglePosition = value;\n  }\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n\n\n  _hasSpacing() {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n\n    return false;\n  }\n  /** Gets the expanded state string. */\n\n\n  _getExpandedState() {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n  /** Toggles the expanded state of the expansion panel. */\n\n\n  toggle() {\n    this.expanded = !this.expanded;\n  }\n  /** Sets the expanded state of the expansion panel to false. */\n\n\n  close() {\n    this.expanded = false;\n  }\n  /** Sets the expanded state of the expansion panel to true. */\n\n\n  open() {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    this._bodyAnimationDone.complete();\n\n    this._inputChanges.complete();\n  }\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n\n\n  _containsFocus() {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n\n}\n\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) {\n  return new (t || MatExpansionPanel)(i0.ɵɵdirectiveInject(MAT_ACCORDION, 12), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.UniqueSelectionDispatcher), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8));\n};\n\nMatExpansionPanel.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatExpansionPanel,\n  selectors: [[\"mat-expansion-panel\"]],\n  contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n    }\n  },\n  viewQuery: function MatExpansionPanel_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._body = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-expansion-panel\"],\n  hostVars: 6,\n  hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    expanded: \"expanded\",\n    hideToggle: \"hideToggle\",\n    togglePosition: \"togglePosition\"\n  },\n  outputs: {\n    opened: \"opened\",\n    closed: \"closed\",\n    expandedChange: \"expandedChange\",\n    afterExpand: \"afterExpand\",\n    afterCollapse: \"afterCollapse\"\n  },\n  exportAs: [\"matExpansionPanel\"],\n  features: [i0.ɵɵProvidersFeature([// Provide MatAccordion as undefined to prevent nested expansion panels from registering\n  // to the same accordion.\n  {\n    provide: MAT_ACCORDION,\n    useValue: undefined\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 4,\n  consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]],\n  template: function MatExpansionPanel_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c1);\n      i0.ɵɵprojection(0);\n      i0.ɵɵelementStart(1, \"div\", 0, 1);\n      i0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) {\n        return ctx._bodyAnimationDone.next($event);\n      });\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵprojection(4, 1);\n      i0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵprojection(6, 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n      i0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n    }\n  },\n  directives: [i2.CdkPortalOutlet],\n  styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matExpansionAnimations.bodyExpansion]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanel, [{\n    type: Component,\n    args: [{\n      selector: 'mat-expansion-panel',\n      exportAs: 'matExpansionPanel',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disabled', 'expanded'],\n      outputs: ['opened', 'closed', 'expandedChange'],\n      animations: [matExpansionAnimations.bodyExpansion],\n      providers: [// Provide MatAccordion as undefined to prevent nested expansion panels from registering\n      // to the same accordion.\n      {\n        provide: MAT_ACCORDION,\n        useValue: undefined\n      }],\n      host: {\n        'class': 'mat-expansion-panel',\n        '[class.mat-expanded]': 'expanded',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n      },\n      template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n      styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [MAT_ACCORDION]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.UniqueSelectionDispatcher\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    hideToggle: [{\n      type: Input\n    }],\n    togglePosition: [{\n      type: Input\n    }],\n    afterExpand: [{\n      type: Output\n    }],\n    afterCollapse: [{\n      type: Output\n    }],\n    _lazyContent: [{\n      type: ContentChild,\n      args: [MatExpansionPanelContent]\n    }],\n    _body: [{\n      type: ViewChild,\n      args: ['body']\n    }]\n  });\n})();\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n\n\nclass MatExpansionPanelActionRow {}\n\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) {\n  return new (t || MatExpansionPanelActionRow)();\n};\n\nMatExpansionPanelActionRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelActionRow,\n  selectors: [[\"mat-action-row\"]],\n  hostAttrs: [1, \"mat-action-row\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-action-row',\n      host: {\n        class: 'mat-action-row'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n\n/** @docs-private */\n\n\nclass MatExpansionPanelHeaderBase {}\n\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n\n\nclass MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase {\n  constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n    super();\n    this.panel = panel;\n    this._element = _element;\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    this._parentChangeSubscription = Subscription.EMPTY;\n    const accordionHideToggleChange = panel.accordion ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) : EMPTY;\n    this.tabIndex = parseInt(tabIndex || '') || 0; // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n\n    this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n      return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n    }))).subscribe(() => this._changeDetectorRef.markForCheck()); // Avoids focus being lost if the panel contained the focused element and was closed.\n\n    panel.closed.pipe(filter(() => panel._containsFocus())).subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n\n\n  get disabled() {\n    return this.panel.disabled;\n  }\n  /** Toggles the expanded state of the panel. */\n\n\n  _toggle() {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n  /** Gets whether the panel is expanded. */\n\n\n  _isExpanded() {\n    return this.panel.expanded;\n  }\n  /** Gets the expanded state string of the panel. */\n\n\n  _getExpandedState() {\n    return this.panel._getExpandedState();\n  }\n  /** Gets the panel id. */\n\n\n  _getPanelId() {\n    return this.panel.id;\n  }\n  /** Gets the toggle position for the header. */\n\n\n  _getTogglePosition() {\n    return this.panel.togglePosition;\n  }\n  /** Gets whether the expand indicator should be shown. */\n\n\n  _showToggle() {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n\n\n  _getHeaderHeight() {\n    const isExpanded = this._isExpanded();\n\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n\n    return null;\n  }\n  /** Handle keydown event calling to toggle() if appropriate. */\n\n\n  _keydown(event) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n\n          this._toggle();\n        }\n\n        break;\n\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n\n\n  focus(origin, options) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n}\n\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) {\n  return new (t || MatExpansionPanelHeader)(i0.ɵɵdirectiveInject(MatExpansionPanel, 1), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2$1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatExpansionPanelHeader.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatExpansionPanelHeader,\n  selectors: [[\"mat-expansion-panel-header\"]],\n  hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"],\n  hostVars: 15,\n  hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() {\n        return ctx._toggle();\n      })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n      i0.ɵɵstyleProp(\"height\", ctx._getHeaderHeight());\n      i0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    tabIndex: \"tabIndex\",\n    expandedHeight: \"expandedHeight\",\n    collapsedHeight: \"collapsedHeight\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 5,\n  vars: 1,\n  consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]],\n  template: function MatExpansionPanelHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c3);\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵprojection(2, 1);\n      i0.ɵɵprojection(3, 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n    }\n  },\n  directives: [i3.NgIf],\n  styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matExpansionAnimations.indicatorRotate]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\n    type: Component,\n    args: [{\n      selector: 'mat-expansion-panel-header',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['tabIndex'],\n      animations: [matExpansionAnimations.indicatorRotate],\n      host: {\n        'class': 'mat-expansion-panel-header mat-focus-indicator',\n        'role': 'button',\n        '[attr.id]': 'panel._headerId',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-controls]': '_getPanelId()',\n        '[attr.aria-expanded]': '_isExpanded()',\n        '[attr.aria-disabled]': 'panel.disabled',\n        '[class.mat-expanded]': '_isExpanded()',\n        '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n        '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '[style.height]': '_getHeaderHeight()',\n        '(click)': '_toggle()',\n        '(keydown)': '_keydown($event)'\n      },\n      template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n      styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatExpansionPanel,\n      decorators: [{\n        type: Host\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i2$1.FocusMonitor\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    expandedHeight: [{\n      type: Input\n    }],\n    collapsedHeight: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n\n\nclass MatExpansionPanelDescription {}\n\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) {\n  return new (t || MatExpansionPanelDescription)();\n};\n\nMatExpansionPanelDescription.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelDescription,\n  selectors: [[\"mat-panel-description\"]],\n  hostAttrs: [1, \"mat-expansion-panel-header-description\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-panel-description',\n      host: {\n        class: 'mat-expansion-panel-header-description'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n\n\nclass MatExpansionPanelTitle {}\n\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) {\n  return new (t || MatExpansionPanelTitle)();\n};\n\nMatExpansionPanelTitle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatExpansionPanelTitle,\n  selectors: [[\"mat-panel-title\"]],\n  hostAttrs: [1, \"mat-expansion-panel-header-title\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-panel-title',\n      host: {\n        class: 'mat-expansion-panel-header-title'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive for a Material Design Accordion.\n */\n\n\nclass MatAccordion extends CdkAccordion {\n  constructor() {\n    super(...arguments);\n    /** Headers belonging to this accordion. */\n\n    this._ownHeaders = new QueryList();\n    this._hideToggle = false;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n\n    this.displayMode = 'default';\n    /** The position of the expansion indicator. */\n\n    this.togglePosition = 'after';\n  }\n  /** Whether the expansion indicator should be hidden. */\n\n\n  get hideToggle() {\n    return this._hideToggle;\n  }\n\n  set hideToggle(show) {\n    this._hideToggle = coerceBooleanProperty(show);\n  }\n\n  ngAfterContentInit() {\n    this._headers.changes.pipe(startWith(this._headers)).subscribe(headers => {\n      this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n\n      this._ownHeaders.notifyOnChanges();\n    });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n  }\n  /** Handles keyboard events coming in from the panel headers. */\n\n\n  _handleHeaderKeydown(event) {\n    this._keyManager.onKeydown(event);\n  }\n\n  _handleHeaderFocus(header) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    this._ownHeaders.destroy();\n  }\n\n}\n\nMatAccordion.ɵfac = /* @__PURE__ */function () {\n  let ɵMatAccordion_BaseFactory;\n  return function MatAccordion_Factory(t) {\n    return (ɵMatAccordion_BaseFactory || (ɵMatAccordion_BaseFactory = i0.ɵɵgetInheritedFactory(MatAccordion)))(t || MatAccordion);\n  };\n}();\n\nMatAccordion.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatAccordion,\n  selectors: [[\"mat-accordion\"]],\n  contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headers = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-accordion\"],\n  hostVars: 2,\n  hostBindings: function MatAccordion_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\n    }\n  },\n  inputs: {\n    multi: \"multi\",\n    hideToggle: \"hideToggle\",\n    displayMode: \"displayMode\",\n    togglePosition: \"togglePosition\"\n  },\n  exportAs: [\"matAccordion\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAccordion, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-accordion',\n      exportAs: 'matAccordion',\n      inputs: ['multi'],\n      providers: [{\n        provide: MAT_ACCORDION,\n        useExisting: MatAccordion\n      }],\n      host: {\n        class: 'mat-accordion',\n        // Class binding which is only used by the test harness as there is no other\n        // way for the harness to detect if multiple panel support is enabled.\n        '[class.mat-accordion-multi]': 'this.multi'\n      }\n    }]\n  }], null, {\n    _headers: [{\n      type: ContentChildren,\n      args: [MatExpansionPanelHeader, {\n        descendants: true\n      }]\n    }],\n    hideToggle: [{\n      type: Input\n    }],\n    displayMode: [{\n      type: Input\n    }],\n    togglePosition: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatExpansionModule {}\n\nMatExpansionModule.ɵfac = function MatExpansionModule_Factory(t) {\n  return new (t || MatExpansionModule)();\n};\n\nMatExpansionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatExpansionModule\n});\nMatExpansionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatExpansionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n      exports: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent],\n      declarations: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };","map":{"version":3,"sources":["E:/users/admin/Documents/netlify-portfolio/node_modules/@angular/material/fesm2020/expansion.mjs"],"names":["CdkAccordionItem","CdkAccordion","CdkAccordionModule","i2","TemplatePortal","PortalModule","i3","DOCUMENT","CommonModule","i0","InjectionToken","Directive","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","SkipSelf","Inject","Input","Output","ContentChild","ViewChild","Host","Attribute","QueryList","ContentChildren","NgModule","mixinTabIndex","MatCommonModule","coerceBooleanProperty","i2$1","FocusKeyManager","distinctUntilChanged","startWith","filter","take","ENTER","hasModifierKey","SPACE","ANIMATION_MODULE_TYPE","Subject","Subscription","EMPTY","merge","trigger","state","style","transition","animate","i1","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","transform","bodyExpansion","height","visibility","MatExpansionPanelContent","constructor","_template","ɵfac","TemplateRef","ɵdir","type","args","selector","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","accordion","_changeDetectorRef","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","x","y","fromState","toState","subscribe","event","emit","hideToggle","value","togglePosition","_togglePosition","_hasSpacing","expanded","displayMode","_getExpandedState","toggle","close","open","ngAfterContentInit","_lazyContent","opened","_portal","ngOnChanges","changes","next","ngOnDestroy","complete","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","ChangeDetectorRef","UniqueSelectionDispatcher","ViewContainerRef","ɵcmp","provide","useValue","undefined","CdkPortalOutlet","exportAs","encapsulation","None","changeDetection","OnPush","inputs","outputs","animations","providers","host","template","styles","decorators","MatExpansionPanelActionRow","class","MatExpansionPanelHeaderBase","_MatExpansionPanelHeaderMixinBase","MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","_parentChangeSubscription","accordionHideToggleChange","_stateChanges","parseInt","closed","markForCheck","focusVia","expandedHeight","collapsedHeight","disabled","_toggle","_isExpanded","_getPanelId","id","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","preventDefault","_handleHeaderKeydown","focus","origin","options","ngAfterViewInit","monitor","_handleHeaderFocus","unsubscribe","stopMonitoring","ElementRef","FocusMonitor","NgIf","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","arguments","_ownHeaders","show","_headers","headers","reset","header","notifyOnChanges","_keyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","useExisting","descendants","MatExpansionModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport * as i2 from '@angular/cdk/portal';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, Input, Output, ContentChild, ViewChild, Host, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    constructor(_template) {\n        this._template = _template;\n    }\n}\nMatExpansionPanelContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelContent, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelContent, selector: \"ng-template[matExpansionPanelContent]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matExpansionPanelContent]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /** Stream of body animation done events. */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe(event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened\n                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))\n                .subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n}\nMatExpansionPanel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanel, deps: [{ token: MAT_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatExpansionPanel.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanel, selector: \"mat-expansion-panel\", inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, host: { properties: { \"class.mat-expanded\": \"expanded\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"class.mat-expansion-panel-spacing\": \"_hasSpacing()\" }, classAttribute: \"mat-expansion-panel\" }, providers: [\n        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n        // to the same accordion.\n        { provide: MAT_ACCORDION, useValue: undefined },\n    ], queries: [{ propertyName: \"_lazyContent\", first: true, predicate: MatExpansionPanelContent, descendants: true }], viewQueries: [{ propertyName: \"_body\", first: true, predicate: [\"body\"], descendants: true }], exportAs: [\"matExpansionPanel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], directives: [{ type: i2.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanel, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel', exportAs: 'matExpansionPanel', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled', 'expanded'], outputs: ['opened', 'closed', 'expandedChange'], animations: [matExpansionAnimations.bodyExpansion], providers: [\n                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                        // to the same accordion.\n                        { provide: MAT_ACCORDION, useValue: undefined },\n                    ], host: {\n                        'class': 'mat-expansion-panel',\n                        '[class.mat-expanded]': 'expanded',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                    }, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [MAT_ACCORDION]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }]; }, propDecorators: { hideToggle: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }], afterExpand: [{\n                type: Output\n            }], afterCollapse: [{\n                type: Output\n            }], _lazyContent: [{\n                type: ContentChild,\n                args: [MatExpansionPanelContent]\n            }], _body: [{\n                type: ViewChild,\n                args: ['body']\n            }] } });\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelActionRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelActionRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelActionRow, selector: \"mat-action-row\", host: { classAttribute: \"mat-action-row\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelActionRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-action-row',\n                    host: {\n                        class: 'mat-action-row',\n                    },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatExpansionPanelHeader.\n/** @docs-private */\nclass MatExpansionPanelHeaderBase {\n}\nconst _MatExpansionPanelHeaderMixinBase = mixinTabIndex(MatExpansionPanelHeaderBase);\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader extends _MatExpansionPanelHeaderMixinBase {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n        super();\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        const accordionHideToggleChange = panel.accordion\n            ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])))\n            : EMPTY;\n        this.tabIndex = parseInt(tabIndex || '') || 0;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n            return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }))).subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n}\nMatExpansionPanelHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelHeader, deps: [{ token: MatExpansionPanel, host: true }, { token: i0.ElementRef }, { token: i2$1.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component });\nMatExpansionPanelHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelHeader, selector: \"mat-expansion-panel-header\", inputs: { tabIndex: \"tabIndex\", expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, host: { attributes: { \"role\": \"button\" }, listeners: { \"click\": \"_toggle()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.id\": \"panel._headerId\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"_getPanelId()\", \"attr.aria-expanded\": \"_isExpanded()\", \"attr.aria-disabled\": \"panel.disabled\", \"class.mat-expanded\": \"_isExpanded()\", \"class.mat-expansion-toggle-indicator-after\": \"_getTogglePosition() === 'after'\", \"class.mat-expansion-toggle-indicator-before\": \"_getTogglePosition() === 'before'\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"style.height\": \"_getHeaderHeight()\" }, classAttribute: \"mat-expansion-panel-header mat-focus-indicator\" }, usesInheritance: true, ngImport: i0, template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [matExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['tabIndex'], animations: [matExpansionAnimations.indicatorRotate], host: {\n                        'class': 'mat-expansion-panel-header mat-focus-indicator',\n                        'role': 'button',\n                        '[attr.id]': 'panel._headerId',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': '_getPanelId()',\n                        '[attr.aria-expanded]': '_isExpanded()',\n                        '[attr.aria-disabled]': 'panel.disabled',\n                        '[class.mat-expanded]': '_isExpanded()',\n                        '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                        '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[style.height]': '_getHeaderHeight()',\n                        '(click)': '_toggle()',\n                        '(keydown)': '_keydown($event)',\n                    }, template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: MatExpansionPanel, decorators: [{\n                    type: Host\n                }] }, { type: i0.ElementRef }, { type: i2$1.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; }, propDecorators: { expandedHeight: [{\n                type: Input\n            }], collapsedHeight: [{\n                type: Input\n            }] } });\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelDescription, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelDescription.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelDescription, selector: \"mat-panel-description\", host: { classAttribute: \"mat-expansion-panel-header-description\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelDescription, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-description',\n                    host: {\n                        class: 'mat-expansion-panel-header-description',\n                    },\n                }]\n        }] });\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatExpansionPanelTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatExpansionPanelTitle, selector: \"mat-panel-title\", host: { classAttribute: \"mat-expansion-panel-header-title\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionPanelTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-title',\n                    host: {\n                        class: 'mat-expansion-panel-header-title',\n                    },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /** Headers belonging to this accordion. */\n        this._ownHeaders = new QueryList();\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        this.togglePosition = 'after';\n    }\n    /** Whether the expansion indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle;\n    }\n    set hideToggle(show) {\n        this._hideToggle = coerceBooleanProperty(show);\n    }\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._ownHeaders.destroy();\n    }\n}\nMatAccordion.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAccordion, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatAccordion.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAccordion, selector: \"mat-accordion\", inputs: { multi: \"multi\", hideToggle: \"hideToggle\", displayMode: \"displayMode\", togglePosition: \"togglePosition\" }, host: { properties: { \"class.mat-accordion-multi\": \"this.multi\" }, classAttribute: \"mat-accordion\" }, providers: [\n        {\n            provide: MAT_ACCORDION,\n            useExisting: MatAccordion,\n        },\n    ], queries: [{ propertyName: \"_headers\", predicate: MatExpansionPanelHeader, descendants: true }], exportAs: [\"matAccordion\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-accordion',\n                    exportAs: 'matAccordion',\n                    inputs: ['multi'],\n                    providers: [\n                        {\n                            provide: MAT_ACCORDION,\n                            useExisting: MatAccordion,\n                        },\n                    ],\n                    host: {\n                        class: 'mat-accordion',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if multiple panel support is enabled.\n                        '[class.mat-accordion-multi]': 'this.multi',\n                    },\n                }]\n        }], propDecorators: { _headers: [{\n                type: ContentChildren,\n                args: [MatExpansionPanelHeader, { descendants: true }]\n            }], hideToggle: [{\n                type: Input\n            }], displayMode: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatExpansionModule {\n}\nMatExpansionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatExpansionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, declarations: [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent], imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule], exports: [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent] });\nMatExpansionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, imports: [[CommonModule, MatCommonModule, CdkAccordionModule, PortalModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatExpansionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n                    exports: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                    declarations: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };\n"]},"metadata":{},"sourceType":"module"}